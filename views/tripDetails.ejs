<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trip Details with Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css">
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.polylineDecorator/1.6.0/leaflet.polylineDecorator.min.js"></script>
    <style>
        body {
            display: flex;
            flex-direction: column;
            margin: 0;
            font-family: Arial, sans-serif;
            height: 100vh;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: black;
            color: white;
            padding: 15px 20px;
        }

        header h1 {
            margin: 0;
            font-size: 24px;
        }

        header h1 a {
            color: white;
            text-decoration: none;
        }

        header nav a {
            color: white;
            text-decoration: none;
            font-weight: bold;
            margin-left: 15px;
        }

        main {
            flex: 1;
            display: flex;
        }

        .left-pane, .right-pane {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .left-pane {
            border-right: 1px solid #ddd;
        }

        #map {
            width: 100%;
            height: 100%;
        }

        footer {
            background-color: black;
            color: white;
            text-align: center;
            padding: 15px;
        }

        .destination-item {
            margin-bottom: 20px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        .trip-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .trip-header button {
            background-color: yellow;
            color: black;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .trip-header button:hover {
            background-color: #ffc107;
        }
    </style>
</head>
<body>
    <header>
        <h1><a href="/">Travel Planner</a></h1>
        <nav>
            <a href="/trips/my-trip">Back to My Trips</a>
            <a href="/auth/logout">Logout</a>
        </nav>
    </header>

    <main>
        <div class="left-pane">
            <div class="trip-header">
                <h2>Trip Details</h2>
                <!-- Edit Trip Button -->
                <button onclick="window.location.href='/trips/edit/<%= trip._id %>'">Edit Trip</button>
            </div>

            <h3>Destinations</h3>
            <div id="destination-list">
                <% trip.destinations.forEach(destination => { %>
                    <div class="destination-item" data-lat="<%= destination.coordinates.latitude %>" data-lon="<%= destination.coordinates.longitude %>">
                        <h4><%= destination.city %>, <%= destination.country %></h4>
                        <p><strong>Planned Dates:</strong> 
                            <% if (destination.startDate && destination.endDate) { %>
                                <%= new Date(destination.startDate).toLocaleDateString() %> - <%= new Date(destination.endDate).toLocaleDateString() %>
                            <% } else { %>
                                No dates provided
                            <% } %>
                        </p>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="right-pane">
            <div id="map"></div>
        </div>
    </main>

    <footer>
        <p>&copy; 2024 Travel Planner. All rights reserved.</p>
    </footer>
    <script>
        // Initialize the map
        const map = L.map('map', {
            worldCopyJump: false,
            maxBounds: [[-90, -180], [90, 180]],
            maxBoundsViscosity: 1.0
        }).setView([0, 0], 2);
    
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            minZoom: 2,
            noWrap: true
        }).addTo(map);
    
        // Function to update the map with markers and polylines
        function updateMap(destinations) {
            map.eachLayer(layer => {
                if (layer instanceof L.Marker || layer instanceof L.Polyline) {
                    map.removeLayer(layer);
                }
            });
    
            const latLngPoints = [];
    
            destinations.forEach(dest => {
                if (!isNaN(dest.coordinates.latitude) && !isNaN(dest.coordinates.longitude)) {
                    const marker = L.marker([dest.coordinates.latitude, dest.coordinates.longitude]).addTo(map);
                    marker.bindPopup(`<strong>${dest.city}, ${dest.country}</strong>`);
                    latLngPoints.push([dest.coordinates.latitude, dest.coordinates.longitude]);
                }
            });
    
            if (latLngPoints.length === 1) {
                // Zoom in on the single destination
                map.setView(latLngPoints[0], 10);
            } else if (latLngPoints.length > 1) {
                // Draw polyline and fit bounds
                const polyline = L.polyline(latLngPoints, { color: 'blue', weight: 3 }).addTo(map);
                L.polylineDecorator(polyline, {
                    patterns: [
                        {
                            offset: '25%',
                            repeat: '50%',
                            symbol: L.Symbol.arrowHead({
                                pixelSize: 10,
                                pathOptions: { fillOpacity: 1, color: 'red' }
                            })
                        }
                    ]
                }).addTo(map);
                map.fitBounds(polyline.getBounds());
            } else {
                // Default global view
                map.setView([0, 0], 2);
            }
        }
    
        // Function to fetch and reload trip data
        async function loadTrip() {
            try {
                const tripId = '<%= trip._id %>'; // Dynamically passed from the server
                const response = await fetch(`/trips/${tripId}`);
                if (response.ok) {
                    const trip = await response.json();
                    updateMap(trip.destinations); // Update map with fetched destinations
                } else {
                    console.error('Failed to fetch trip details.');
                }
            } catch (error) {
                console.error('Error loading trip:', error);
            }
        }
    
        // Load the trip data on page load
        loadTrip();
    </script>
    
</body>
</html>
