<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Trip Route</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f0f2f5;
            color: #333;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .navbar {
            background-color: #000;
            color: #fff;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .navbar a {
            color: #fff;
            text-decoration: none;
            font-weight: bold;
        }

        .container {
            background-color: #fff;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
            max-width: 1000px;
            width: 70%;
            margin: 40px auto;
            position: relative;
        }

        h1 {
            text-align: center;
            margin-bottom: 20px;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        label {
            font-weight: bold;
            margin-bottom: 5px;
        }

        input,
        select,
        textarea {
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            font-size: 16px;
            width: 100%;
        }

        button {
            padding: 15px;
            background-color: #007bff;
            color: #fff;
            font-size: 16px;
            font-weight: bold;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px;
            align-self: center;
            width: 50%;
        }

        button:hover {
            background-color: #0056b3;
        }

        #map {
            height: 400px;
            width: 100%;
            margin-top: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .added-destinations {
            margin-top: 20px;
            padding: 20px;
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .destination-item {
            margin-bottom: 15px;
        }

        footer {
            background-color: #333;
            color: #fff;
            text-align: center;
            padding: 20px 0;
            margin-top: auto;
            clear: both;
        }
    </style>
</head>

<body>
    <header class="navbar">
        <div class="logo">
            <a href="/">Travel Planner</a>
        </div>
        <nav>
            <a href="/trips/view">View Trips</a> |
            <a href="/trips/add">Add Trip</a> |
            <a href="/auth/logout">Logout</a>
        </nav>
    </header>

    <div class="container">
        <h1>Add New Trip Route</h1>
        <form id="addTripForm">
            <div>
                <label for="tripName">Trip Route Name:</label>
                <input type="text" id="tripName" name="tripName" placeholder="Enter the name of your trip route" required>
            </div>

            <h2>Destination Information</h2>
            <div>
                <label for="continent">Continent:</label>
                <select id="continent" name="continent" required>
                    <option value="">Select Continent</option>
                </select>
            </div>

            <div>
                <label for="region">Region:</label>
                <select id="region" name="region" required>
                    <option value="">Select Region</option>
                </select>
            </div>

            <div>
                <label for="country">Country:</label>
                <select id="country" name="country" required>
                    <option value="">Select Country</option>
                </select>
            </div>

            <div>
                <label for="city">City:</label>
                <input type="text" id="city" name="city" placeholder="Enter city or click on the map" required>
            </div>

            <div id="map"></div>

            <div>
                <label for="startDate">Start Date:</label>
                <input type="date" id="startDate" name="startDate" required>
            </div>

            <div>
                <label for="endDate">End Date:</label>
                <input type="date" id="endDate" name="endDate" required>
            </div>

            <div>
                <label for="activities">Activities:</label>
                <textarea id="activities" name="activities" placeholder="Enter activities separated by commas (e.g., sightseeing, hiking)" rows="3"></textarea>
            </div>

            <button type="button" id="addDestinationButton">Add Destination to Trip</button>
            <button type="submit">Save Trip Route</button>
        </form>

        <div class="added-destinations" id="addedDestinations">
            <h2>Added Destinations</h2>
            <div id="destinationList"></div>
        </div>
    </div>

    <footer>
        &copy; 2024 Travel Planner. All rights reserved.
    </footer>

    <script>
        let destinations = [];
    
        // Load locations data from locations.json
        fetch('/data/locations.json')
            .then(response => response.json())
            .then(data => {
                const continentSelect = document.getElementById('continent');
                const regionSelect = document.getElementById('region');
                const countrySelect = document.getElementById('country');
    
                // Populate continent dropdown
                Object.keys(data).forEach(continent => {
                    const option = document.createElement('option');
                    option.value = continent;
                    option.textContent = continent;
                    continentSelect.appendChild(option);
                });
    
                // Handle continent change
                continentSelect.addEventListener('change', () => {
                    const selectedContinent = continentSelect.value;
                    clearSelect(regionSelect, 'Select Region');
                    clearSelect(countrySelect, 'Select Country');
    
                    if (selectedContinent && data[selectedContinent]) {
                        Object.keys(data[selectedContinent]).forEach(region => {
                            const regionOption = document.createElement('option');
                            regionOption.value = region;
                            regionOption.textContent = region;
                            regionSelect.appendChild(regionOption);
                        });
                    }
    
                    // Set map view based on continent
                    if (selectedContinent && data[selectedContinent]) {
                        const [lat, lon] = data[selectedContinent]["coordinates"];
                        map.setView([lat, lon], 3); // Zoom out to show the continent area
                    }
                });
    
                // Handle region change
                regionSelect.addEventListener('change', () => {
                    const selectedContinent = continentSelect.value;
                    const selectedRegion = regionSelect.value;
                    clearSelect(countrySelect, 'Select Country');
    
                    if (selectedContinent && selectedRegion && data[selectedContinent][selectedRegion]) {
                        data[selectedContinent][selectedRegion].forEach(country => {
                            const countryOption = document.createElement('option');
                            countryOption.value = country.name;
                            countryOption.textContent = country.name;
                            countrySelect.appendChild(countryOption);
                        });
                    }
                });
    
                // Handle country change
                countrySelect.addEventListener('change', () => {
                    const selectedContinent = continentSelect.value;
                    const selectedRegion = regionSelect.value;
                    const selectedCountry = countrySelect.value;
    
                    if (selectedContinent && selectedRegion && selectedCountry) {
                        const countryData = data[selectedContinent][selectedRegion].find(c => c.name === selectedCountry);
                        if (countryData) {
                            const [lat, lon] = countryData.coordinates;
                            map.setView([lat, lon], 5); // Zoom in to show the country area
                        }
                    }
                });
            })
            .catch(error => console.error('Error loading locations:', error));
    
        // Initialize the map
        const map = L.map('map', {
            worldCopyJump: false, 
            maxBounds: [[-90, -180], [90, 180]], 
            maxBoundsViscosity: 1.0, 
            minZoom: 2 
        }).setView([20, 0], 2); // Set to global view initially
    
        let marker;
    
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
    
        // Handle map click for adding/editing a marker
        map.on('click', function (e) {
            addMarker(e.latlng.lat, e.latlng.lng);
        });
    
// Function to update dropdowns dynamically based on the JSON data
function updateDropdownsBasedOnJSON(countryName, jsonData) {
    const continentSelect = document.getElementById('continent');
    const regionSelect = document.getElementById('region');
    const countrySelect = document.getElementById('country');

    // Search for the matching country in the JSON file
    for (const [continent, regions] of Object.entries(jsonData)) {
        for (const [region, countries] of Object.entries(regions)) {
            const matchingCountry = countries.find(c => c.name === countryName);
            if (matchingCountry) {
                // Update dropdowns to match the found location
                continentSelect.value = continent;
                continentSelect.dispatchEvent(new Event('change'));

                setTimeout(() => {
                    regionSelect.value = region;
                    regionSelect.dispatchEvent(new Event('change'));
                }, 500); // Allow time for region to populate

                setTimeout(() => {
                    countrySelect.value = matchingCountry.name;
                }, 1000); // Allow time for country to populate
                return;
            }
        }
    }
}

// Modify the addMarker function to include dropdown updates
function addMarker(lat, lon) {
    if (marker) map.removeLayer(marker);

    marker = L.marker([lat, lon], { draggable: true }).addTo(map);

    // Reverse geocode to fetch country name
    fetch(`https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`)
        .then(response => response.json())
        .then(data => {
            const countryName = data.address?.country;
            const cityName = data.address?.city || data.address?.town || data.address?.village;
            
            document.getElementById('city').value = cityName || 'Unknown City';

            // Fetch the JSON file and update dropdowns
            fetch('/data/locations.json')
                .then(response => response.json())
                .then(jsonData => {
                    updateDropdownsBasedOnJSON(countryName, jsonData);
                })
                .catch(error => console.error('Error loading JSON:', error));
        })
        .catch(error => console.error('Error fetching reverse geocode:', error));

    // Allow user to adjust marker position
    marker.on('dragend', function () {
        const position = marker.getLatLng();
        fetch(`https://nominatim.openstreetmap.org/reverse?lat=${position.lat}&lon=${position.lng}&format=json`)
            .then(response => response.json())
            .then(data => {
                const countryName = data.address?.country;
                const cityName = data.address?.city || data.address?.town || data.address?.village;
                
                document.getElementById('city').value = cityName || 'Unknown City';

                // Fetch the JSON file and update dropdowns
                fetch('/data/locations.json')
                    .then(response => response.json())
                    .then(jsonData => {
                        updateDropdownsBasedOnJSON(countryName, jsonData);
                    })
                    .catch(error => console.error('Error loading JSON:', error));
            })
            .catch(error => console.error('Error fetching reverse geocode:', error));
    });
}

    
        // Add destination to the trip
        document.getElementById('addDestinationButton').addEventListener('click', function () {
            const continent = document.getElementById('continent').value;
            const country = document.getElementById('country').value;
            const city = document.getElementById('city').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const activities = document.getElementById('activities').value;
    
            if (!continent || !country || !city || !startDate || !endDate) {
                alert('Please fill in all required fields.');
                return;
            }
    
            const newDestination = {
                continent,
                country,
                city,
                coordinates: marker ? marker.getLatLng() : map.getCenter(),
                startDate,
                endDate,
                activities
            };
    
            destinations.push(newDestination);
            updateDestinationsList();
        });
    
        // Update the UI with the added destinations
        function updateDestinationsList() {
            const list = document.getElementById('destinationList');
            list.innerHTML = '';
            destinations.forEach((destination, index) => {
                const div = document.createElement('div');
                div.className = 'destination-item';
                div.innerHTML = `<strong>Destination ${index + 1}:</strong> ${destination.city}, ${destination.country} from ${destination.startDate} to ${destination.endDate}`;
                list.appendChild(div);
            });
        }
    
        // Handle form submission to save the trip
        document.getElementById('addTripForm').addEventListener('submit', function (e) {
            e.preventDefault();
            
            const tripName = document.getElementById('tripName').value;
        
            const formData = {
                tripName,
                destinations
            };
        
            // Log the data to check if it's correct
            console.log('Sending trip data:', formData);
        
            // Make the request to save the trip data
            fetch('/trips/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (response.ok) {
                        alert('Trip route added successfully!');
                        window.location.href = '/trips/my-trip'; // Change this URL to redirect to 'my-trip' page
                    } else {
                        alert('Failed to add trip route. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred. Please try again.');
                });
        });
        
        
        // Function to show error message
        function showErrorMessage(message) {
            alert(message);
        }
    
        // Function to clear a <select> element
        function clearSelect(selectElement, defaultText) {
            selectElement.innerHTML = `<option value="">${defaultText}</option>`;
        }
    </script>
    </body>
    
    </html>
    